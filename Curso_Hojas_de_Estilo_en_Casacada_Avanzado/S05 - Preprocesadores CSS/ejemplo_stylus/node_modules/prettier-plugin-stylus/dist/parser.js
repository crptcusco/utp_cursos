"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var parser_exports = {};
__export(parser_exports, {
  BLANK_LINE_PLACEHOLDER: () => BLANK_LINE_PLACEHOLDER,
  parse: () => parse
});
module.exports = __toCommonJS(parser_exports);
var import_parser = __toESM(require("stylus/lib/parser.js"));
var import_token = __toESM(require("stylus/lib/token.js"));
var import_comment = __toESM(require("stylus/lib/nodes/comment.js"));
var import_utils = require("./utils");
const BLANK_LINE_PLACEHOLDER = "APLACEHOLDERWHICHNEVERCOLLIDES";
function preserveBlankLines(text) {
  var _a, _b;
  const lines = (0, import_utils.splitLinesWithEols)(text);
  let start = 0, end = lines.length - 1;
  for (; start < end && (0, import_utils.isBlankLine)(lines[start]); start++)
    ;
  for (; end > start && (0, import_utils.isBlankLine)(lines[end]); end--)
    ;
  for (let i = start; i < end; i++) {
    if ((0, import_utils.isBlankLine)(lines[i])) {
      let indent = "";
      if (i > 0 && !(0, import_utils.isBlankLine)(lines[i - 1])) {
        indent = (_b = (_a = lines[i - 1].match(/\s*/)) == null ? void 0 : _a[0]) != null ? _b : "";
      }
      lines[i] = indent + "//" + BLANK_LINE_PLACEHOLDER + lines[i];
    }
  }
  return lines.slice(start, end + 1).join("");
}
function parse(text) {
  text = preserveBlankLines(text);
  const parser = new import_parser.default(text, { cache: false });
  const originalComment = parser.lexer.comment.bind(parser.lexer);
  parser.lexer.comment = function() {
    if (this.str[0] == "/" && this.str[1] == "/") {
      let end = this.str.indexOf("\n");
      if (end == -1)
        end = this.str.length;
      const str = this.str.substr(0, end);
      this.skip(end);
      return new import_token.default("comment", new import_comment.default(str, false, true));
    }
    return originalComment();
  };
  return parser.parse();
}
//# sourceMappingURL=parser.js.map
